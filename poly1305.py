#!/usr/bin/env python3

def clamp_r(r_bytes):
    """Clamp the r portion of the key as per the Poly1305 specification."""
    r = int.from_bytes(r_bytes, "little")
    r &= 0x0ffffffc0ffffffc0ffffffc0fffffff
    return r


def poly1305_mac(msg, key):
    """Generate a Poly1305 MAC for the given message and key."""
    if len(key) != 32:
        raise ValueError("Key must be 32 bytes long")

    # Split the key into r and s
    r = clamp_r(key[:16])
    breakpoint()
    s = int.from_bytes(key[16:], "little")
    p = (1 << 130) - 5  # Prime number 2^130 - 5

    # Initialize the accumulator
    acc = 0

    # Process each 16-byte block of the message
    for i in range(0, len(msg), 16):
        # Take a 16-byte block (or pad if it's less than 16 bytes)
        block = msg[i:i + 16]
        block += b'\x01'  # Append a 1 byte for the block (little-endian padding)
        n = int.from_bytes(block, "little")

        # Accumulate and mod with p
        acc += n
        acc *= r
        acc %= p

    # Final addition of s
    acc = (acc + s) % (1 << 128)  # Reduce to 16 bytes

    # Output 16-byte MAC tag
    return acc.to_bytes(16, "little")

# Example usage
key = bytearray([0x1c, 0x92, 0x40, 0xa5, 0xeb, 0x55, 0xd3, 0x8a, 0xf3, 0x33, 0x88, 0x86, 0x04, 0xf6, 0xb5, 0xf0, 0x47, 0x39, 0x17, 0xc1, 0x40, 0x2b, 0x80, 0x09, 0x9d, 0xca, 0x5c, 0xbc, 0x20, 0x70, 0x75, 0xc0,])
msg = bytearray([0x27, 0x54, 0x77, 0x61, 0x73, 0x20, 0x62, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x67, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6c, 0x69, 0x74, 0x68, 0x79, 0x20, 0x74, 0x6f, 0x76, 0x65, 0x73, 0x0a, 0x44, 0x69, 0x64, 0x20, 0x67, 0x79, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x67, 0x69, 0x6d, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x62, 0x65, 0x3a, 0x0a, 0x41, 0x6c, 0x6c, 0x20, 0x6d, 0x69, 0x6d, 0x73, 0x79, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6f, 0x72, 0x6f, 0x67, 0x6f, 0x76, 0x65, 0x73, 0x2c, 0x0a, 0x41, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x74, 0x68, 0x73, 0x20, 0x6f, 0x75, 0x74, 0x67, 0x72, 0x61, 0x62, 0x65, 0x2e, ])

tag = poly1305_mac(msg, key)
print("MAC tag:", tag.hex())

